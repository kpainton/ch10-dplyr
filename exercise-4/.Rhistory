# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, timegained = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights_two <- mutate(flights, timegained = arr_delay - dep_delay)
View(flights_two)
View(flights_two)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_two <- arrange(flights_two, -timegained)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_twopipe <- mutate(flights, timegained = arr_delay - dep_delay) %>%
arrange(-timegained)
View(flights_twopipe)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_two)
# Make a histogram of the amount of time gained using the `hist()` function
hist(timegained)
# Make a histogram of the amount of time gained using the `hist()` function
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_two$timegained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(select(flights_two, timegained))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(select(flights_two, timegained), na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(select(flights_two, timegained, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights_two$timegained, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
fights_to_SEA <- filter(flights_two, origin, destination = "SEA", timegained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
fights_to_SEA <- filter(flights_two, origin, destination == "SEA", timegained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
fights_to_SEA <- filter(flights_two, origin, dest == "SEA", timegained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
fights_to_SEA <- select(flights_two, origin, dest = "SEA", timegained) %>%
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
fights_to_SEA <- select(flights_two, origin, dest = "SEA", timegained) %>%
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
fights_to_SEA <- select(flights_two, origin, dest = "SEA", timegained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
fights_to_SEA <- select(flights_two, origin, dest = "LAX", timegained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
fights_to_SEA <- select(flights_two, origin, dest == "SEA", timegained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
fights_to_SEA <- select(flights_two, origin,dest, timegained) %>%
filter(dest =="SEA" )
View(fights_to_SEA)
# On average, did flights to SeaTac gain or loose time?
mean(flights_to_SEA$timegained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_to_SEA <- select(flights_two, origin,dest, timegained) %>%
filter(dest =="SEA" )
# On average, did flights to SeaTac gain or loose time?
mean(flights_to_SEA$timegained)
# On average, did flights to SeaTac gain or loose time?
mean(flights_to_SEA$timegained, na.rm = TRUE)
summary <- flights %>% filter(origin == 'JFK', dest == "SEA") %>%
summarise (
avg_time = mean(timegained, na.rm = T),
min_time = min(timegained, na.rm = T),
max_time = max(timegained, na.rm = T)
)
summary <- flights %>% filter(origin == 'JFK', dest == "SEA") %>%
summarise (
avg_time = mean(timegained, na.rm = T),
min_time = min(timegained, na.rm = T),
max_time = max(timegained, na.rm = T)
)
summary <- flights_two %>% filter(origin == 'JFK', dest == "SEA") %>%
summarise (
avg_time = mean(timegained, na.rm = T),
min_time = min(timegained, na.rm = T),
max_time = max(timegained, na.rm = T)
)
View(summary)
