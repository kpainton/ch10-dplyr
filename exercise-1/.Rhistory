# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- c(vechiles$makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- c(vehicles$makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes_info <- vehicles[c("make")]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes_info <- vehicles[, c("make")]
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes_info <- vehicles[, c("make")]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes_info)
# Filter the data set for vehicles manufactured in 1997
filter(makes, year == 1997 )
# Filter the data set for vehicles manufactured in 1997
filter(make, year == 1997 )
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997 )
# Filter the data set for vehicles manufactured in 1997
filter(makes_info, year == 1997 )
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997 )
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes_info <- select(vechiles, make)
library("devtools")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes_info <- select(vechiles, make)
# Filter the data set for vehicles manufactured in 1997
vehicles[vehilces$year == 1997]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Filter the data set for vehicles manufactured in 1997
vehicles[,vehicles$year == 1997]
# Filter the data set for vehicles manufactured in 1997
vehicles[, vehicles$year == 1997]
# Filter the data set for vehicles manufactured in 1997
vehicles[, vehicles$year == 1997]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles_1997$hwy)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes_info))
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles_1997 <- vehicles_1997[order(vehicles_1997$hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles_1997 <- vehicles_1997[order(vehicles_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average = (cars_1997$hwy + cars_1997_cty) / 2
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average = (vehicles_1997$hwy + vehicles_1997_cty) / 2
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average = (vehicles_1997$hwy + vehicles_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20_mpg <- vehicles[vehickes$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20_mpg <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy), "id"]
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
cars <- select(vehicles, makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
cars <- select(vehicles, makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
cars <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(cars)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
length(distinct(cars))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
sum(distinct(cars))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(cars))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, ratio = cty + hwy/2)
View(cars_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = cty + hwy/2)
View(cars_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
2_wheel_drive_20_mpg <- filter(vehicles, drive = "2-Wheel Drive", mpg > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
Two_wheel_drive_20_mpg <- filter(vehicles, drive = "2-Wheel Drive", mpg > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
Two_wheel_drive_20_mpg <- filter(vehicles, drive == "2-Wheel Drive", mpg > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
Two_wheel_drive_20_mpg <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
View(Two_wheel_drive_20_mpg)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst <- filter(Two_wheel_drive_20_mpg, hwy == min(hwy))
worst_id <- select(worst, id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
test <- function(year_choice, make_choice) {
year <- filter(vechiles, year == year_choice)
makes <- filter(year, make == make_choice)
best <- select(makes, hwy = max(hwy))
}
# What was the most efficient Honda model of 1995?
test(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
test <- function(year_choice, make_choice) {
year <- filter(vehicles, year == year_choice)
makes <- filter(year, make == make_choice)
best <- select(makes, hwy = max(hwy))
}
# What was the most efficient Honda model of 1995?
test(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
test <- function(year_choice, make_choice) {
year <- filter(vehicles, year == year_choice, hwy)
makes <- filter(year, make == make_choice, hwy)
best <- select(makes, hwy = max(hwy))
}
# What was the most efficient Honda model of 1995?
test(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
test <- function(year_choice, make_choice) {
year <- filter(vehicles, year == year_choice, hwy)
makes <- filter(year, make == make_choice, hwy)
best <- select(makes, hwy = max(hwy))
}
# What was the most efficient Honda model of 1995?
test(1995, "Honda")
best <- filter(year, hwy == max(hwy))
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
test <- function(year_choice, make_choice) {
year <- filter(vehicles, year == year_choice, make == make_choice)
best <- filter(year, hwy == max(hwy))
}
# What was the most efficient Honda model of 1995?
test(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
test <- function(year_choice, make_choice) {
year <- filter(vehicles, year == year_choice, make == make_choice)
best <- filter(year, hwy == max(hwy))
pick <- filter(best, model)
}
# What was the most efficient Honda model of 1995?
test(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
test <- function(year_choice, make_choice) {
year <- filter(vehicles, year == year_choice, make == make_choice)
best <- filter(year, hwy == max(hwy))
pick <- filter(best, model)
pick
}
# What was the most efficient Honda model of 1995?
test(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
test <- function(year_choice, make_choice) {
year <- filter(vehicles, year == year_choice, make == make_choice)
year <- filter(year, hwy == max(hwy))
pick <- filter(year, model)
pick
}
# What was the most efficient Honda model of 1995?
test(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
test <- function(year_choice, make_choice) {
small <- filter(vehicles, year == year_choice, make == make_choice)
small <- filter(small, hwy == max(hwy))
pick <- filter(small, model)
pick
}
# What was the most efficient Honda model of 1995?
test(1995, "Honda")
